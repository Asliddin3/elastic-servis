package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"

	"github.com/Asliddin3/poll-servis/graph/model"
)

// CreatePoll is the resolver for the CreatePoll field.
func (r *mutationResolver) CreatePoll(ctx context.Context, input *model.NewPoll) (*model.Poll, error) {
	return r.Service.Storage.Poll().CreatePoll(input)
}

// ChoiceFromPoll is the resolver for the ChoiceFromPoll field.
func (r *mutationResolver) ChoiceFromPoll(ctx context.Context, input *model.UserChoice) (*model.Poll, error) {
	return r.Service.Storage.Poll().ChoiceFromPoll(input)
}

// Poll is the resolver for the poll field.
func (r *queryResolver) Poll(ctx context.Context, pollID string) (*model.Poll, error) {
	return r.Service.Storage.Poll().GetPoll(&pollID)
}

// Polls is the resolver for the polls field.
func (r *queryResolver) Polls(ctx context.Context) ([]*model.Poll, error) {
	fmt.Println("polls")
	return r.Service.Storage.Poll().GetPolls()
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
